package edu.farmingdale.pizzapartybottomnavbar


import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Menu
import androidx.compose.material3.DrawerValue
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.ModalDrawerSheet
import androidx.compose.material3.ModalNavigationDrawer
import androidx.compose.material3.NavigationDrawerItem
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.rememberDrawerState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavGraph.Companion.findStartDestination
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import edu.farmingdale.pizzapartybottomnavbar.ui.theme.PizzaPartyBottomNavBarTheme
import kotlinx.coroutines.launch

/** i really had trouble trying to figure out how to do the drawer with options.
 * so after spending a while using the android studios website to do it, i decided
 * to use chat gpt and it gave me this class to add in the drawer options. once again,
 * I DID NOT MAKE THIS CLASS IT WAS GENERATED BY CHAT GPT. i try my best not to use it,
 * but i was stumped.
 *
 */
class MainActivity : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            PizzaPartyBottomNavBarTheme {
                val navController = rememberNavController()
                var buttonsVisible by remember { mutableStateOf(true) } // Splash toggles this via NavigationGraph

                // Drawer state per website pattern
                val drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)
                val scope = rememberCoroutineScope()

                // Track current route for drawer selection highlight
                val backStackEntry by navController.currentBackStackEntryAsState()
                val currentRoute = backStackEntry?.destination?.route

                ModalNavigationDrawer(
                    drawerState = drawerState,
                    drawerContent = {
                        ModalDrawerSheet {
                            Column(
                                modifier = Modifier
                                    .padding(horizontal = 16.dp)
                                    .verticalScroll(rememberScrollState())
                            ) {
                                Spacer(Modifier.height(12.dp))
                                Text(
                                    "Menu",
                                    modifier = Modifier.padding(16.dp),
                                    style = MaterialTheme.typography.titleLarge
                                )

                                // --- Drawer buttons (wire to your routes) ---
                                NavigationDrawerItem(
                                    label = { Text("PizzaApp") },
                                    selected = currentRoute == BottomNavigationItems.PizzaScreen.route,
                                    onClick = {
                                        scope.launch { drawerState.close() }
                                        navController.navigate(BottomNavigationItems.PizzaScreen.route) {
                                            popUpTo(navController.graph.findStartDestination().id) {
                                                saveState = true
                                            }
                                            launchSingleTop = true
                                            restoreState = true
                                        }
                                    }
                                )
                                NavigationDrawerItem(
                                    label = { Text("GPA Calc") },
                                    selected = currentRoute == BottomNavigationItems.GpaAppScreen.route,
                                    onClick = {
                                        scope.launch { drawerState.close() }
                                        navController.navigate(BottomNavigationItems.GpaAppScreen.route) {
                                            popUpTo(navController.graph.findStartDestination().id) {
                                                saveState = true
                                            }
                                            launchSingleTop = true
                                            restoreState = true
                                        }
                                    }
                                )
                                NavigationDrawerItem(
                                    label = { Text("Third") },
                                    selected = currentRoute == BottomNavigationItems.Screen3.route,
                                    onClick = {
                                        scope.launch { drawerState.close() }
                                        navController.navigate(BottomNavigationItems.Screen3.route) {
                                            popUpTo(navController.graph.findStartDestination().id) {
                                                saveState = true
                                            }
                                            launchSingleTop = true
                                            restoreState = true
                                        }
                                    }
                                )
                            }
                        }
                    }
                ) {
                    Scaffold(
                        topBar = {
                            if (buttonsVisible) {
                                TopAppBar(
                                    title = { Text("Menu") },
                                    navigationIcon = {
                                        IconButton(onClick = {
                                            scope.launch {
                                                if (drawerState.isClosed) drawerState.open() else drawerState.close()
                                            }
                                        }) {
                                            Icon(Icons.Default.Menu, contentDescription = "Menu")
                                        }
                                    }
                                )
                            }
                        },
                        /** took away the bottom bar since the png show no bottom bar
                        bottomBar = {
                            if (buttonsVisible) {
                                BottomBar(
                                    navController = navController,
                                    state = buttonsVisible,
                                    modifier = Modifier
                                )
                            }
                        }
                        */
                    ) { paddingValues ->
                        Box(modifier = Modifier.padding(paddingValues)) {
                            // Keep your NavHost + splash visibility callback
                            NavigationGraph(navController = navController) { isVisible ->
                                buttonsVisible = isVisible
                            }
                        }
                    }
                }
            }
        }
    }
}